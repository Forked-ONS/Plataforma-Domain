from database import Base
from uuid import uuid4
from core.mapper import TemporalMixin, effective_now
import sqlalchemy.dialects.postgresql as sap
from sqlalchemy.ext.declarative import declared_attr
from sqlalchemy import UniqueConstraint, Column, Integer, String, DateTime, create_engine, orm, ForeignKey, event
import datetime


class MigrationHistory(Base):
    name = Column(String(80), unique=True, nullable=False)
    created_date = Column(DateTime, default=datetime.datetime.utcnow)

def get_db_name():
    return "{{database_name}}"

{{#each model}}

class {{up_first @key}}(Base, TemporalMixin):

    def __init__(self, {{#join . ","}}{{name}}=None{{/join}}, _metadata=None):
        {{#each .}}
        self.{{@key}} = {{@key}}
        {{/each}}
        self._metadata = _metadata

    def dict(self):
        return {
            {{#join . ","}}"{{name}}": self.{{name}}{{/join}},
            "id": self.id,
            "_metadata": self._metadata
        }

    @declared_attr
    def __tablename__(cls):
        return cls.__name__.lower()
    temporal = ('name', )

    {{#each . }}
    {{@key}} = Column({{type}})

    {{/each}}

    id = Column(sap.UUID(as_uuid=True), primary_key=True, default=uuid4)

{{/each}}





