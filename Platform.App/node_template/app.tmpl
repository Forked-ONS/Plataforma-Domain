var restify = require('restify');
var server = restify.createServer();
var mapper = require('./mapper.js');
server.use(restify.plugins.queryParser());
server.use(restify.plugins.bodyParser());


const Sequelize = require('sequelize');

const sequelize = new Sequelize('app', 'postgres', '', {
  host: 'localhost',
  dialect: 'postgres',
  pool: {
    max: 5,
    min: 0,
    acquire: 30000,
    idle: 10000
  },
  logging: true,
  operatorsAliases: true
});

var model = {};

//Declaring models with Sequelize
{{#each model}}
model["{{@key}}"] = sequelize.define('{{@key}}', {
    {{#join . ","}}
    {{name}}: { type: {{type}} {{#if primaryKey}}, primaryKey: {{primaryKey}}{{/if}}{{#if autoIncrement}}, autoIncrement: {{autoIncrement}}  {{/if}} } {{/join}}
    ,start_date:{ type: Sequelize.DATE, defaultValue: Sequelize.NOW },
    end_date:{ type: Sequelize.DATE, defaultValue: new Date("9999-12-31") }
},{
    timestamps: false
});

{{/each}}

//Declaring relationship between models

{{#each relations}}
model["{{0}}"].{{1}}(model["{{2}}"]);
{{/each}}


//Sincronize database
sequelize.sync();


//default api rest

server.post('/:entity/all', (req, res, next)=>{    
    var q = req.body;
   // q.include[0].model = model[q.include[0].model];
    model[req.params.entity].findAll(q).then(entities => {
        res.send(entities);
        next();
    }).catch(console.error);
});

server.get('/:appId/:entity', (req, res, next)=>{    
    var appId = req.params.appId;
    var mappedEntity = req.params.entity;
    var entity = mapper.getModelName(appId,mappedEntity);
    var projection = mapper.getProjection(appId,mappedEntity)[mappedEntity];
    projection.include = mapper.getIncludes(appId,mappedEntity,model);
    if (projection.include.length == 0){
        delete projection.include;
    }
    projection.where = mapper.getFilters(appId,mappedEntity,req);
    if (Object.keys(projection.where).length === 0){
        delete projection.where;
    }
    model[entity].findAll(projection).then(result => {
        var fullMapped = mapper.applyTransformations(appId,mappedEntity,result);
        res.send(fullMapped);
        next();
    }).catch(e =>{
        console.log(e);
        res.send("error");
        next();
    });
});

//salva qualquer entidade
server.post('/:entity', (req, res, next)=>{
    model[req.params.entity].create(req.body).then(entity => {
        res.send(entity);
        next();
    }).catch((e)=>{        
        res.send("error");
        next();
    });
});



server.listen(9090, function() {
    console.log('%s listening at %s', server.name, server.url);
});