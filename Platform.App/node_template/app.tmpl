var restify = require('restify');
var server = restify.createServer();

server.use(restify.plugins.queryParser());
server.use(restify.plugins.bodyParser());


const Sequelize = require('sequelize');

const sequelize = new Sequelize('app', 'postgres', '', {
  host: 'localhost',
  dialect: 'postgres',
  pool: {
    max: 5,
    min: 0,
    acquire: 30000,
    idle: 10000
  },
  operatorsAliases: false
});

var model = {};

//Declaring models with Sequelize
{{#each model}}
model["{{@key}}"] = sequelize.define('{{@key}}', {
    {{#join . ","}}
    {{name}}: { type: {{type}} {{#if primaryKey}}, primaryKey: {{primaryKey}}{{/if}}{{#if autoIncrement}}, autoIncrement: {{autoIncrement}}  {{/if}} } {{/join}}
    ,start_date:{ type: Sequelize.DATE, defaultValue: Sequelize.NOW },
    end_date:{ type: Sequelize.DATE, defaultValue: new Date("9999-12-31") }
});

{{/each}}

//Declaring relationship between models

{{#each relations}}
model["{{0}}"].{{1}}(model["{{2}}"]);
{{/each}}


//Sincronize database
sequelize.sync();


//default api rest

server.post('/:entity/all', (req, res, next)=>{    
    var q = req.body;
   // q.include[0].model = model[q.include[0].model];
    model[req.params.entity].findAll(q).then(entities => {
        res.send(entities);
        next();
    }).catch(console.error);
});

server.get('/:entity/:id', (req, res, next)=>{
    model[req.params.entity].findById(req.params.id).then(entity => {
        res.send(entity);
        next();
    }).catch((e)=>{
        res.send("error");
        next();
    });
});

//salva qualquer entidade
server.post('/:entity', (req, res, next)=>{
    model[req.params.entity].create(req.body).then(entity => {
        res.send(entity);
        next();
    }).catch((e)=>{        
        res.send("error");
        next();
    });
});



server.listen(9090, function() {
    console.log('%s listening at %s', server.name, server.url);
});